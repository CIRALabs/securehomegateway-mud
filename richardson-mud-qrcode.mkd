---
title: On loading MUD URLs from QR codes
abbrev: QR-MUD
docname: draft-richardson-mud-qrcode-02

stand_alone: true

ipr: trust200902
area: Internet
kw: Internet-Draft
cat: info

pi:    # can use array (if all yes) or hash here
  toc: yes
  sortrefs:   # defaults to yes
  symrefs: yes

author:

- ins: M. Richardson
  name: Michael Richardson
  org: Sandelman Software Works
  email: mcr+ietf@sandelman.ca

- ins: J. Latour
  name: Jacques Latour
  org: CIRA Labs
  email: Jacques.Latour@cira.ca

- ins: H. Habibi Gharakheili
  name: Hassan Habibi Gharakheili
  org: UNSW Sydney
  email: h.habibi@unsw.edu.au


normative:
  RFC2119:
  RFC8520:
  SQRL:
    target: "https://rla.org/resource/12n-documentation"
    title: "SQRL Codes: Standardized Quick Response for Logistics, Using the 12N Data Identifier"
    author:
      org: "Reverse Logistics Association"
    date: "February 2017"


informative:
  qrcode:
    target: "https://en.wikipedia.org/wiki/QR_code"
    title: "QR Code"
    author:
      org: "Wikipedia"
    date: "December 2019"
  RFC8259:
  I-D.ietf-anima-bootstrapping-keyinfra: BRSKI
  I-D.ietf-opsawg-mud-acceptable-urls:
  ieee802-1AR:
    target: "http://standards.ieee.org/findstds/standard/802.1AR-2009.html"
    title: "IEEE 802.1AR Secure Device Identifier"
    author:
      org: "IEEE Standard"
    date: 2009
  chickenegg:
    target: "https://en.wikipedia.org/wiki/Chicken_or_the_egg"
    title: "Chicken or the egg"
    author:
      org: "Wikipedia"
    date: "December 2019"
  qrcodewebservice:
    target: "https://duckduckgo.com/?q=QR+code+web+generator"
    title: "QR Code Generators"
    author:
      org: "Internet"
    date: "December 2019"
  qrencode:
    target: "https://fukuchi.org/works/qrencode/index.html.en"
    title: "QR encode"
    author:
      ins: "K. Fukuchi"
    date: "December 2019"
  mh10:
    target: "https://webstore.ansi.org/Standards/MHIA/ANSIMH102016"
    title: "ANSI MH10.8.2 Committee"
    date: "May 2021"
  MUDgee:
    target: "https://github.com/ayyoob/mudgee"
    title: "MUDgee"
    author:
      ins: "A. Hamza"
    date: "July 2019"
  MUDfiles:
    target: "https://iotanalytics.unsw.edu.au/mud/"
    title: "MUD Profiles"
    author:
      ins: "UNSW Sydney"
    date: "July 2019"
  isoiec18004:
    title: "Information technology - Automatic identification and data capture techniques - QR Code bar code symbology specification (ISO/IEC 18004)"
    author:
      org: "ISO/IEC"
    date: "2015-02-01"
  URLshorten:
    title: "URL shortening"
    target: "https://en.wikipedia.org/wiki/URL_shortening"
    author:
      org: "Wikipedia"
    date: "2021-05-13"


--- abstract

This informational document details a protocol to load MUD definitions
for devices which have no integrated Manufacturer Usage Description (MUD) [RFC8520] support.

This document is published to inform the Internet community of this mechanism to allow
interoperability and to serve as a basis of other standards work if there is interest.

[^track]

[^track]: RFC-EDITOR-please-remove: This work is tracked at https://github.com/mcr/mud-qrcode

--- middle

# Introduction

The Manufacturer Usage Description (MUD) {{RFC8520}} defines a YANG data model to express what sort of access a device requires to operate correctly.
That document additionally defines three ways for the device to
to communicate to a network enforcement point the MUD URL, i.e., the URL of the resulting MUD file in JSON {{RFC8259}}: DHCP, within an X.509 certificate extension, and via LLDP.

Each of the above mechanism conveys the MUD URL in-band, and requires modifications to the device firmware.
Most small IoT devices do not have LLDP, and often have very restricted DHCP clients.
Adding the LLDP or DHCP options requires at least some minimal configuration change, and possibly entire new subsystems.
Meanwhile, use of the PKIX certification extension only makes sense as part of a larger IDevID based {{ieee802-1AR}} deployment such as {{-BRSKI}}.

In the above cases these mechanisms can only be implemented by persons with access to modify and update the firmware of the device.

In the meantime there is a chicken or egg problem ({{chickenegg}}): "manufacturers are not motivated to (and thus likely do not) include MUD URLs in their products, as they believe that  there are no gateways using those URLs.
At the same time, gateways have little incentive to (and thus likely do not) include code that processes MUD URLs, as it is believed that no products have and disseminate them.

The protocol described here allows any person with physical access to the device to affix a reference to a MUD URL that can later be scanned by an end user.

The QR-based protocol is presented as a convenient alternative when the mechanisms from RFC 8520  are not available to use, on the device or the gateway.

Affixing a sticker can be done by

* the marketing department of the Manufacturer,

* an outsourced assembler plant,

* value added resellers (perhaps in response to a local RFP),

* a company importing the product (possibly to comply with a local regulation),

* a network administrator (perhaps before sending devices home with employees, or to remote sites),

* a retailer as a value added service.

QRcodes are informally described in {{qrcode}} and formally defined in {{isoiec18004}}.
The protocol described in this document uses a QRcode to encode the MUD URL.  Specifically, the protocol leverages the data format from the Reverse Logistics Association's Standardized Quick Response for Logistics {{SQRL}}.

SQRL codes are being put on devices via sticker or via laser etching into the case in order to deal with many situations, but specifically for end-of-life processing for the device.
An important idea behind the effort is that clearly identifying a product permits appropriate disposal, refurbishment or recycling of the components of the product.

There are also use cases for SQRL described in which the codes are used as part of regular maintenance for a product.

SQRL is an application of the 12N Data Identifier system specified by the ANSI MH10.8.2 Committee {{mh10}} in a format appropriate for QRcodes as well as other things like NFCs transmissions.

QRcode generators are available as web services {{qrcodewebservice}},
or as programs such as {{qrencode}}.

{{genericfirmware}} summarizes the considerations contained in {{I-D.ietf-opsawg-mud-acceptable-urls}} section 6.1 ("Updating MUD URLs vs Updating MUD files").
Due to the immutable nature of the QRcode, MUD URLs in this document will need to
non-firmware specific.

# Terminology          {#Terminology}

{::boilerplate bcp14}

Readers should be familiar with the terminology in {{RFC8520}}, including: MUD file, MUD URL, Manufacturer and MUD manager and controller.

# Protocol

This QRcode protocol builds upon the work by {{SQRL}}.
That protocol is very briefly described in {{sqrlsummary}}.
Then the list of needed Data Records to be filled in is explained.

## The SQRL Protocol {#sqrlsummary}

{{SQRL}} documents an octet protocol that can be efficiently encoded into QRcodes using a sequence of ASCII bytes, plus six control codes (see section 3.1 of {{SQRL}}):

* &lt;RS> Record Separator (ASCII 30)

* &lt;EoT> End of Transmission (ASCII 4)

* &lt;FS> Field Separator (ASCII 28)

* &lt;GS> Group Separator (ASCII 29)

* &lt;US> Unit Separator (ASCII 31),

* Concatenation Operator (ASCII 43: "+").

Section 7.2 of {{SQRL}} gives the details, which can be summarized as:

1. The QR code header starts with:

~~~~
"[)>" <RS> "06" <GS> "12N"
~~~~

2. Include one or more Data Records. This consists of a four letter Field Identifiers followed by ASCII characters terminated with a &lt;Unit Separator>.

3. End with:

~~~~
<RS><EoT>
~~~~

There are additionally optional flags that may be present in every Data Record as described in section 7.4 of {{SQRL}}.
These flags have no bearing on MUD processing.
A parser which is only collecting MUD URLs will not need to parse those flags.
A general purpose SQRL parser will need more complexity.

Field Seperator characters are used in SQRL to signify the beginning of a new unit of data.
A MUD specific parser that encounters a Field Seperator and has not yet collected the right MUD information MUST ignore the characters collected so far and then restart.

Environment records, as described in {{SQRL}} section 7.4, look and act exactly as fields, with a special Field Identifier.
They serve no purpose when looking for MUD information, and MAY be ignored.

## Manufacturer Usage Descriptions in SQRL

### B000 Company Name

The B000 Data Record is mandatory in {{SQRL}}.
It MUST be in ASCII representation.
It should be a representation of the company or brand name.
It SHOULD match the ietf-mud/mud/mfg-name in the MUD file, however the MUD file can contain arbitrary UTF8 for this name, while the SQRL files are expected to be 7-bit US-ASCII.

### B001 Product Name

The B001 Data Record is optional in {{SQRL}}.
It is the Product Name in ASCII.
It's presence is RECOMMENDED.
Some third parties that create QRcode stickers might not know the product name with 100% certainty, and MAY prefer to omit this rather than create further confusion.

### B002 Model Number

The B002 Data Record is optional in {{SQRL}}, but is MANDATORY in this profile.
It is the Model Name in ASCII.
It SHOULD match the optional ietf-mud/mud/model-name in the MUD file if that entry is present in the MUD file.

If a third party that is creating QRcodes can not locate an official model number when creating their MUD file and QRcode, then the third party SHOULD make one up.

### MUD URL Data Record

A new Field Identifier has been assigned by the Reverse Logistics Association (RLA), which is "M180"
This record MUST be filled with the MUD URL.

Short URLs are easier to encode into QRcode because they require fewer pixels of
QRcode.
More content in the QRcode requires a bigger image.

Use of URL shortening services (see {{URLshorten}}) can be useful provided that the service is stable throughout the lifetime of the device and QRcode, and that the privacy stance of the service is well understood.

Section 8.1 of {{SQRL}} also has some good advice on longevity concerns with URLs.

The URL provided MUST NOT have a query (?) portion present.
If one is present, the query portion MUST be removed before processing.

### Device MAC Address {#macaddress}

If a MAC address is used as a unique device identifier (which is RECOMMENDED if possible), then it MUST be included in this Data Record.

{{SQRL}} section 9.10 defines the Data Record: "M06C" as the MAC address.
No format for the MAC address is provided in that document.

This document RECOMMENDS 12 (or 16) hex octets are used with no spaces or punctuation.
(16 octets are used in the IEEE OUI-64 format used in 802.15.4, and some next generation Ethernet proposals)

Parsers that find punctuation (such as colons (":"), dashes ("-"), or white space) MUST
skip over it.

# Generic URL or Version Specific URL {#genericfirmware}

MUD URLs which are communicated in-band by the device, and which are programmed into the device's firmware may provide a firmware specific version of the MUD URL.
This has the advantage that the resulting Access Control Lists (ACLs) enforced in the network are specific to the needs of that version of the firmware.

A MUD URL which is affixed to the device with a sticker, or etched into the case can not be changed.

Given the considerations of {{I-D.ietf-opsawg-mud-acceptable-urls}} section 6.1 ("Updating MUD URLs vs Updating MUD files"), it is prudent to use a MUD URL which points to a MUD file which will only have new features added over time, and never have features removed.

When the firmware eventually receives built-in MUD URL support, then a more specific URL may be used.

Note that in many cases it will be third parties who are generating these QRcodes, so the MUD file may be hosted by the third party.

# Crowd Supply of MUD Files

At the time of writing, the IETF MUD is a new IETF Proposed Standard.
Hence, IoT device manufacturers have not yet provided MUD profiles for their devices.
A research group at the University of New South Wales (UNSW Sydney) has developed an open-source tool, called MUDgee ({{MUDgee}}), which automatically generates a MUD file (profile) for an IoT device from its traffic trace in order to make this process faster, easier, and more accurate.
Note that the generated profile completeness solely depends on the completeness of the input traffic traces.
MUDgee assumes that all the activity seen is intended and benign.

UNSW researchers have applied MUDgee about 30 consumer IoT devices from their lab testbed, and publicly released their MUD files ({{MUDfiles}}).
MUDgee can assist IoT manufacturers in developing and verifying MUD profiles, while also  helping adopters of these devices to ensure they are compatible with their organisational policies.

Similar processes have been done in a number of other public and private labs.
One of the strong motivations for this specification is to allow for this work to leave the lab, to be applied in the field.

# Privacy Considerations

The presence of the MUD URL in the QR code reveals the manufacturer of the device, the type or model of the device, and possibly the firmware version of the device.

The MAC address of the device will also need to be present, and this is potentially Personally Identifiable Information (PII).
Such QRcodes should not be placed on the outside of the packaging, and only on the device itself, ideally on a non-prominent part of the device. (e.g., the bottom).

The QR code sticker should not placed on any part of the device that might become visible to machine vision systems in the same area.
This includes security systems, robotic vacuum cleaners, anyone taking a picture with a camera.
Such systems may store the picture(s) in such a way that a future viewer of the image will be able to decode the QR code, possibly through assembly of multiple pictures.
Of course, the QR code is not, however, a certain indicator that the device is present, only that the QR code sticker that came with the device is present.

# Security Considerations

The mere presence of at QRcode on a device does not in itself create any security issues on its own.
Neither an attached paper sticker or a laser etched code in a plastic case will not affect the device operation.
The QRcode is not active, it is not in general able to communicate on nearby networks.
It is conceivable that something more active is concealed in the sticker: an NFC or RFID tag for instance.
But, any sticker could contain such a thing: on some university campuses stickers are often used as part of political campaigns, and can be found attached all over the place.

Security issues that this protocol create are related to assumptions that the presence of the QRcode might imply.
The presence of the QRcode may imply to some owners or network operators that the behaviour of the device has been vetted by some authority.
It is here that some caution is required.

The network operator who takes the MUD file designated by the QRcode needs to be careful that they are validating the signature on the MUD file.
Not only that the file is intact, but that the signer of the file is authorized to sign MUD files for that vendor, or that the network operator has some trust if the MUD file is a crowd sourced definition.
At the time of writing, {{RFC8520}} does not define any infrastructure to authenticate or authorize MUD file signers.

A possibly bigger risk from application of MUD file stickers to devices is that they may begin to convey a sense of safety to users of the device.
The presence of the sticker, possibly with the logo of the physical establishment in which the device is located could convey to occupants of the establishment that this device is an official device.
For instance, a university which only deploys sensors on the university campus that have been vetted for compliance against a MUD definition.

The risk is then of social engineering: any device with a reasonable looking QRcode may be seen as a trusted device.
An attacker that wishes to infiltrate their own devices need only suitably camoflage the device with an appropriate sticker in order to convey legitimacy.

Another issue with the stickers is that the wrong sticker could be applied to a device by a reseller or other trusted party, either in error, or via some physical or socially engineered attack against that party.
The network operator now onboards a device, and applies what they think is a legitimate network policy for the device in their hands, only it is in fact a policy for another kind of device.

Careful examination of stickers is in order!

Inclusion of the device specific MAC address (described in {{macaddress}}) in the QRcode makes use of the MUD code much easier as it identifies the device specifically.
If the MAC addresss is not included, then a network operator, having the device in their hands, then has to associate the policy with the device through some other interface.

Despite the significant advantage of having the MAC address include, it is unlikely that third party stickers will include that.
Including the MAC address requires that a unique sticker with a QRcode be created for each device.
This is possible if the sticker is applied by a manufacturer: it is already common to have a serial number and MAC address on the outside of the device.
In that case, if the QRcode is part of that sticker, then the customization problem is not that complex.

For cases where a third party has produced the QRcode, it is likely that every device of a particular model will have the same QRcode applied, omitting the MAC address.
This increases the possibility that the wrong policy will be applied to a device.

# IANA Considerations

This document makes no request for IANA actions.

# Acknowledgements

This work was supported by the Canadian Internet Registration Authority (cira.ca).

--- back

